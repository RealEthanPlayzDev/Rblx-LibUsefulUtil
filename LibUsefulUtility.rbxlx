<roblox version="4">
  <Item class="Lighting" referent="0">
    <Properties>
      <string name="Name">Lighting</string>
      <Color3 name="Ambient">
        <R>0</R>
        <G>0</G>
        <B>0</B>
      </Color3>
      <float name="Brightness">2</float>
      <bool name="GlobalShadows">true</bool>
      <bool name="Outlines">false</bool>
      <token name="Technology">1</token>
    </Properties>
  </Item>
  <Item class="ServerScriptService" referent="1">
    <Properties>
      <string name="Name">ServerScriptService</string>
    </Properties>
    <Item class="ModuleScript" referent="2">
      <Properties>
        <string name="Name">LibUsefulUtility</string>
        <string name="Source">--[[
File name: LibUsefulUtility.lua
Author: RadiatedExodus (RealEthanPlayz)
--]]

local ct = {}
for _, v in ipairs(script:GetChildren()) do
	ct[v.Name] = v
end
return setmetatable(ct, {
	__newindex = function() end,
	__call = function(t, utilname)
		if t[utilname] then
			return require(t[utilname])
		end
		return false
	end,
	__metatable = "This metatable is locked"
})</string>
      </Properties>
      <Item class="ModuleScript" referent="3">
        <Properties>
          <string name="Name">LibCustomEvent</string>
          <string name="Source">--[[
File name: LibCustomEvent.lua
Author: RadiatedExodus (RealEthanPlayz/RealEthanPlayzDev/ItzEthanPlayz_YT)
--]]

local LibCustomEvent = {}
local LibCustomEventConnected = {}
LibCustomEvent.__index = LibCustomEvent
LibCustomEventConnected.__index = LibCustomEventConnected

LibCustomEvent.__metatable = "The metatable is locked"
LibCustomEventConnected.__metatable = "The metatable is locked"

--// LibCustomEvent class
--// function &lt;void> LibCustomEvent:Fire(... : variant)
function LibCustomEvent:Fire(...)
    assert(not self.isDestroyed, [[LibCustomEvent: this event has been destroyed and no longer can be used]])
    for _, v in ipairs(self.events) do
        if not typeof(v) == "function" then continue end
        v(...)
    end
    return
end

--// function &lt;LibCustomEventConnected> LibCustomEvent:Connect(func: function)
function LibCustomEvent:Connect(func)
    assert(not self.isDestroyed, [[LibCustomEvent: this event has been destroyed and no longer can be used]])
    assert(typeof(func) == "function", [[LibCustomEvent: invalid argument #1 to 'Connect' (function expected, got ]]..typeof(func)..[[)]])
    local selindex = #self.events + 1
    table.insert(self.events, selindex, func)
    return LibCustomEventConnected.new(self, selindex)
end

--// [deconstructor] function &lt;void> LibCustomEvent:Destroy()
function LibCustomEvent:Destroy()
    self.isDestroyed = true
    table.clear(self.events)
    return
end

--// LibCustomEventConnected class
--// [internal class usage]
function LibCustomEventConnected.new(eventinst, index)
    local newconnectedevent = setmetatable({}, LibCustomEventConnected)

    newconnectedevent.eventinst = eventinst
    newconnectedevent.currentindex = index
    newconnectedevent.Connected = true

    return newconnectedevent
end

--// function &lt;void> LibCustomEventConnected:Disconnect()
function LibCustomEventConnected:Disconnect()
    table.remove(self.eventinst.events, self.currentindex)
    self.Connected = false
    return
end

return {
    --// constructor
	new = function()
		local newevent = setmetatable({}, LibCustomEvent)

		newevent.events = {}
		newevent.isDestroyed = false

		return newevent
	end
}</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">LibDiscordWebhookSender</string>
          <string name="Source">--[[
File name: LibDiscordWebhookSender.lua
Author: RadiatedExodus (RealEthanPlayz/RealEthanPlayzDev/ItzEthanPlayz_YT)
--]]</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">LibInstUtil</string>
          <string name="Source">--[[
File name: LibInstUtil.lua
Author: RadiatedExodus (RealEthanPlayz/RealEthanPlayzDev/ItzEthanPlayz_YT)
--]]

local LibInstUtil = {}

--// function &lt;number> LibInstUtil.CalculateTotalMass(inst: Instance)
function LibInstUtil.CalculateTotalMass(inst: Instance)
    assert(typeof(inst) == "Instance", [[LibInstUtil: invalid argument #2 to 'Create' (Instance expected, got ]]..typeof(inst)..[[)]])
    if inst:IsA("BasePart") then
        return inst.Mass
    elseif inst:IsA("Model") then
        local masscount = 0
        for _, v in pairs(inst:GetDescendants()) do
            if v:IsA("BasePart") then
                masscount += v.Mass
            end
        end
    end
end

--// function &lt;Instance> LibInstUtil.Create(classname: string, data: table)
function LibInstUtil.Create(classname: string, data: table)
    assert(typeof(classname) == "string", [[LibInstUtil: invalid argument #1 to 'Create' (string expected, got ]]..typeof(classname)..[[)]])
    assert(typeof(data) == "table", [[LibInstUtil: invalid argument #2 to 'Create' (table expected, got ]]..typeof(classname)..[[)]])
    local newinst = Instance.new(classname)
    local parentpropertyavailable = nil
    for property, value in pairs(data) do
        if not property == "Parent" then
            newinst[property] = value
        else
            parentpropertyavailable = value
        end
    end
    if parentpropertyavailable then newinst.Parent = parentpropertyavailable end
    parentpropertyavailable = nil
    return newinst
end

--// function &lt;void> LibInstUtil.SetAllBasePartTransparency(inst: Instance, newtransparency: number)
function LibInstUtil.SetAllBasePartTransparency(inst: Instance, newtransparency: number)
    assert(typeof(inst) == "Instance", [[LibInstUtil: invalid argument #1 to 'SetAllBasePartTransparency' (Instance expected, got ]]..typeof(inst)..[[)]])
    assert(typeof(newtransparency) == "Instance", [[LibInstUtil: invalid argument #2 to 'SetAllBasePartTransparency' (number expected, got ]]..typeof(newtransparency)..[[)]])
    if inst:IsA("BasePart") then
        inst.Transparency = newtransparency
    else
        for _, v in pairs(inst:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Transparency = newtransparency
            end
        end
    end
    return
end

return LibInstUtil</string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="Workspace" referent="6">
    <Properties>
      <string name="Name">Workspace</string>
      <bool name="FilteringEnabled">true</bool>
    </Properties>
    <Item class="Part" referent="7">
      <Properties>
        <string name="Name">Baseplate</string>
        <bool name="Anchored">true</bool>
        <Color3uint8 name="Color3uint8">6446690</Color3uint8>
        <bool name="Locked">true</bool>
        <Vector3 name="Position">
          <X>0</X>
          <Y>-10</Y>
          <Z>0</Z>
        </Vector3>
        <Vector3 name="size">
          <X>512</X>
          <Y>20</Y>
          <Z>512</Z>
        </Vector3>
      </Properties>
    </Item>
  </Item>
</roblox>